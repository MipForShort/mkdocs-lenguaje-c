{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bienvenido a esta documentaci\u00f3n sobre Programaci\u00f3n en Lenguaje C","text":"<p>Esta documentaci\u00f3n est\u00e1 basada en el libro \"Programaci\u00f3n en Lenguaje C\" de Jordi Bataller, una obra fundamental que me ha servido como gu\u00eda para profundizar en los conceptos esenciales del lenguaje C, desde sus fundamentos hasta temas avanzados.</p> <p>Mi visi\u00f3n al crear esta documentaci\u00f3n es ofrecer un recurso claro, estructurado y accesible para cualquier persona interesada en aprender C, ya sea estudiante, profesional o entusiasta de la programaci\u00f3n. Aqu\u00ed encontrar\u00e1s una presentaci\u00f3n did\u00e1ctica que complementa y organiza los contenidos del libro, acompa\u00f1ada de ejemplos, notas y explicaciones pensadas para facilitar la comprensi\u00f3n y el aprendizaje efectivo.</p> <p>Te invito a explorar los cap\u00edtulos, practicar con los ejemplos y aprovechar este material para fortalecer tus habilidades en uno de los lenguajes de programaci\u00f3n m\u00e1s relevantes y vigentes en la industria del software.</p> <p>\u00a1Bienvenido y feliz aprendizaje!</p>"},{"location":"#lista-de-contenido","title":"Lista de contenido","text":"<ul> <li>1. Introducci\u00f3n a los Lenguajes de Programaci\u00f3n</li> <li>2. El Primer Programa en C</li> <li>3. Variables en C</li> <li>4. Asignaci\u00f3n y Operadores en C</li> <li>5. Estructuras de Control de Flujo</li> </ul>"},{"location":"#acerca-del-proyecto","title":"Acerca del proyecto","text":"<p>Esta documentaci\u00f3n est\u00e1 desarrollada con MkDocs, una herramienta sencilla y potente para crear sitios web de documentaci\u00f3n usando Markdown.</p>"},{"location":"1.-Introduccion-a-la-programacion-en-C/","title":"1. Introducci\u00f3n a los Lenguajes de Programaci\u00f3n","text":"<p>Para entender qu\u00e9 es un lenguaje de programaci\u00f3n es necesario comprender un poco la estructura donde se ejecuta dicho lenguaje mediante un ordenador.</p>"},{"location":"1.-Introduccion-a-la-programacion-en-C/#ordenador","title":"Ordenador","text":"<p>Un ordenador es un dispositivo electr\u00f3nico que procesa, transforma o elabora informaci\u00f3n.</p> <p>A partir de datos de entrada y siguiendo reglas e instrucciones, se generan datos de salida.</p>"},{"location":"1.-Introduccion-a-la-programacion-en-C/#procesador-y-memoria","title":"Procesador y Memoria","text":"<p>El aparato que realiza el procesamiento es el procesador o CPU.</p> <p>Para que el procesador acceda a datos, se utiliza un dispositivo que los almacene temporalmente: la memoria RAM (Random Access Memory). Esta guarda los datos con los cuales se comunica el CPU mientras est\u00e1 trabajando.</p> <p>Dato clave</p> <p>La RAM es vol\u00e1til: su contenido se pierde cuando el ordenador se apaga.</p>"},{"location":"1.-Introduccion-a-la-programacion-en-C/#perifericos","title":"Perif\u00e9ricos","text":"<p>Los perif\u00e9ricos son dispositivos complementarios del ordenador, utilizados para la obtenci\u00f3n, almacenamiento, procesado y salida de datos.</p> <p>Tipos de perif\u00e9ricos:</p> <ul> <li>Entrada: rat\u00f3n, teclado.</li> <li>Salida: pantalla, impresora.</li> <li>Almacenamiento: discos duros, unidades SSD, memorias USB.</li> </ul> <p>Consejo</p> <p>Algunos dispositivos pueden funcionar como entrada y salida al mismo tiempo, como las pantallas t\u00e1ctiles.</p>"},{"location":"1.-Introduccion-a-la-programacion-en-C/#instrucciones-de-codigo-maquina","title":"Instrucciones de C\u00f3digo M\u00e1quina","text":"<p>Se conoce como c\u00f3digo m\u00e1quina al conjunto de operaciones b\u00e1sicas del procesador.</p> <p>Incluye:</p> <ul> <li>Operaciones matem\u00e1ticas</li> <li>Comparaciones</li> <li>Operaciones l\u00f3gicas</li> <li>Gesti\u00f3n de ejecuci\u00f3n</li> </ul> <p>Importante</p> <p>Estas instrucciones son entendidas directamente por la CPU y dependen de su arquitectura.</p>"},{"location":"1.-Introduccion-a-la-programacion-en-C/#programa-y-su-ejecucion","title":"Programa y su Ejecuci\u00f3n","text":"<p>Un programa es un conjunto de instrucciones para la m\u00e1quina. En la RAM, adem\u00e1s de almacenar datos, se encuentran los programas que se est\u00e9n ejecutando.</p> <p>Esto permite:</p> <ul> <li>Mantener la posici\u00f3n del programa en ejecuci\u00f3n.</li> <li>Simular la ejecuci\u00f3n simult\u00e1nea de varios procesos (multitarea).</li> </ul>"},{"location":"1.-Introduccion-a-la-programacion-en-C/#lenguaje-de-programacion","title":"Lenguaje de Programaci\u00f3n","text":"<p>Son el conjunto de reglas para manipular informaci\u00f3n. Se dividen en:</p> <ul> <li>Bajo nivel: comunicaci\u00f3n directa con el procesador.</li> <li>Alto nivel: m\u00e1s cercanos al lenguaje humano.</li> </ul> <p>Ejemplo</p> <p>C y C++ son m\u00e1s cercanos al hardware que Python o JavaScript, pero siguen siendo de alto nivel.</p>"},{"location":"1.-Introduccion-a-la-programacion-en-C/#compiladores-e-interpretes","title":"Compiladores e Int\u00e9rpretes","text":"<ul> <li>Compilador: traduce todo el programa de alto nivel a c\u00f3digo m\u00e1quina y lo ejecuta de una vez.   Si hay errores, pueden impedir la ejecuci\u00f3n o causar fallos inesperados.</li> <li>Int\u00e9rprete: traduce y ejecuta el programa l\u00ednea por l\u00ednea.</li> </ul> <p>Atenci\u00f3n</p> <p>Los compiladores suelen ofrecer mejor rendimiento, pero los int\u00e9rpretes son m\u00e1s flexibles para pruebas r\u00e1pidas.</p>"},{"location":"1.-Introduccion-a-la-programacion-en-C/#ficheros-de-texto-y-editores","title":"Ficheros de Texto y Editores","text":"<p>Para programar se usan editores de texto, guardando los archivos con la extensi\u00f3n correspondiente:</p> Editores de texto<pre><code>.c    // C\n.cpp  // C++\n.py   // Python\n.js   // JavaScript\n</code></pre> <p>Un editor popular es Visual Studio Code, creado por Microsoft.</p>"},{"location":"2.-El-Primer-Programa-en-C/","title":"2. El Primer Programa en C","text":""},{"location":"2.-El-Primer-Programa-en-C/#hola-mundo","title":"Hola Mundo","text":"<p>Por tradici\u00f3n, el primer programa que se explica es \"Hola Mundo\".</p> Hola Mundo<pre><code>#include &lt;stdio.h&gt;\n\nvoid main() \n{\n    printf(\"Hola mundo\\n\");\n}\n</code></pre>"},{"location":"2.-El-Primer-Programa-en-C/#estructura-simple","title":"Estructura simple","text":"<p>La primera parte a observar es la l\u00ednea:</p> <pre><code>void main() { }\n</code></pre> <p>Esta marca el comienzo de la funci\u00f3n principal del programa. Una funci\u00f3n es una estructura de c\u00f3digo que agrupa instrucciones. Las llaves <code>{ }</code> delimitan el inicio y fin de un bloque de c\u00f3digo.</p> <p>La funci\u00f3n <code>main</code> es donde comienza la ejecuci\u00f3n de cualquier programa en C.</p> <p>Dentro del cuerpo de la funci\u00f3n se encuentra la instrucci\u00f3n:</p> <pre><code>printf(\"Hola mundo\\n\");\n</code></pre> <p>En los lenguajes de programaci\u00f3n existen ciertas palabras con funciones predefinidas llamadas palabras reservadas. Aunque <code>printf</code> no es una palabra reservada, es una funci\u00f3n declarada en la biblioteca est\u00e1ndar que se invoca para imprimir texto en pantalla.</p> <p>La l\u00ednea:</p> <pre><code>#include &lt;stdio.h&gt;\n</code></pre> <p>indica que se debe incluir el archivo de encabezado <code>stdio.h</code>, que contiene la declaraci\u00f3n de la funci\u00f3n <code>printf</code> y otras funciones est\u00e1ndar de entrada y salida.</p> <p>Dato Importante</p> <p>El preprocesador de C reemplaza la directiva <code>#include</code> incluyendo el contenido del archivo especificado antes de la compilaci\u00f3n.</p>"},{"location":"2.-El-Primer-Programa-en-C/#comentarios-en-un-programa","title":"Comentarios en un programa","text":"<p>Los comentarios son l\u00edneas de texto que el compilador ignora y se utilizan para explicar la l\u00f3gica y funcionamiento del c\u00f3digo.</p> <p>En C, los comentarios se pueden escribir con:</p> Comentarios<pre><code>/* Comentario que puede ocupar\n   varias l\u00edneas */\n</code></pre> <p>Buenas pr\u00e1cticas</p> <p>Es fundamental utilizar comentarios claros para facilitar el mantenimiento y comprensi\u00f3n futura del c\u00f3digo.</p>"},{"location":"2.-El-Primer-Programa-en-C/#sangrado-o-identacion","title":"Sangrado o Identaci\u00f3n","text":"<p>El sangrado (o indentaci\u00f3n) es la pr\u00e1ctica de usar espacios o tabulaciones para diferenciar visualmente bloques de c\u00f3digo, facilitando su lectura.</p> <p>Ejemplo de buena indentaci\u00f3n en C:</p> Buen indentado<pre><code>/* Este programa est\u00e1 bien indentado */ \n#include &lt;stdio.h&gt;\n\nvoid main ()\n{\n    /* Instrucciones A */\n    {\n        /* Instrucciones B */\n        {\n            /* Instrucciones C */\n            {\n\n            }\n        }\n    }\n}\n</code></pre> <p>Importante</p> <p>Aunque el compilador de C no requiere indentaci\u00f3n, mantener una estructura clara mejora la legibilidad y reduce errores.</p>"},{"location":"3.-Variables-en-C/","title":"3. Variables en C","text":"<p>Una variable es como una caja con nombre que contiene un valor. Puede ser modificada y se almacena en un espacio de memoria con una direcci\u00f3n espec\u00edfica.</p> <p>Los datos se guardan en bytes u octetos, donde cada byte son 8 bits que pueden ser 1 o 0. Un byte puede representar hasta 256 valores diferentes.</p> 1 0 1 0 0 1 1 1 0x7 0x6 0x5 0x4 0x3 0x2 0x1 0x0 <p>Nota importante</p> <p>No todos los valores se almacenan usando un solo byte; los tama\u00f1os var\u00edan seg\u00fan el tipo de dato y la arquitectura del sistema.</p>"},{"location":"3.-Variables-en-C/#variables-basicas","title":"Variables b\u00e1sicas","text":"<p>Las variables b\u00e1sicas almacenan un solo valor.</p> <ul> <li>Para caracteres usamos <code>char</code>.</li> <li>Para n\u00fameros enteros usamos <code>int</code>.</li> <li>Para n\u00fameros reales (decimales) usamos <code>float</code>.</li> </ul> <p>Las variables <code>char</code> almacenan valores ASCII (256 posibles caracteres) y generalmente ocupan un byte. El tama\u00f1o de <code>int</code> y <code>float</code> puede variar seg\u00fan el compilador y la arquitectura.</p>"},{"location":"3.-Variables-en-C/#lista-completa-de-variables-basicas","title":"Lista completa de variables b\u00e1sicas","text":"<ul> <li>char: caracteres ASCII o n\u00fameros enteros entre -128 y 127.</li> <li>signed char: n\u00fameros enteros con signo (-128 a 127).</li> <li>unsigned char: n\u00fameros enteros sin signo (0 a 255).</li> </ul> <p>Tip</p> <p>La palabra <code>signed</code> indica que la variable puede tener valores negativos, mientras que <code>unsigned</code> solo valores positivos.</p> <p>Otros modificadores comunes son:</p> <ul> <li><code>short</code>: para rangos peque\u00f1os.</li> <li><code>long</code>: para rangos grandes.</li> <li><code>double</code>: para n\u00fameros reales con mayor precisi\u00f3n.</li> </ul> <p>La siguiente tabla resume las combinaciones m\u00e1s comunes:</p> char int float signed char signed, signed int double unsigned char unsigned, unsigned int long double short int short, signed short int, signed short unsigned short, unsigned short int long int long, signed long int, signed long unsigned long, unsigned long int long long int long long, signed long long, signed long long int unsigned long long, unsigned long long int"},{"location":"3.-Variables-en-C/#declaracion-de-variables","title":"Declaraci\u00f3n de variables","text":"<p>Declarar una variable significa indicar al compilador que se reservar\u00e1 espacio en memoria para ella.</p> <p>La sintaxis general es:</p> <p><code>modificador</code> <code>tipo</code> <code>nombre</code> <code>;</code></p> <p><code>tipo</code> es el tipo de dato y <code>nombre</code> el identificador.</p> <p>Ejemplos:</p> Ejemplos de tipos de datos<pre><code>int i;\nchar letra;\ndouble r;\nlong int j;\n</code></pre> <p>El modificador <code>const</code> indica que el valor no cambiar\u00e1:</p> Ejemplos de modificador const<pre><code>const float pi = 3.14;\n</code></pre>"},{"location":"3.-Variables-en-C/#lugar-para-declarar-variables","title":"Lugar para declarar variables","text":"<p>Generalmente se declaran al inicio de cada funci\u00f3n, como en <code>main</code>. Tambi\u00e9n pueden declararse m\u00faltiples variables en una l\u00ednea o en l\u00edneas separadas:</p> <pre><code>int a, b;\nint a; \nchar b;\n</code></pre> <p>Es recomendable declarar una variable por l\u00ednea para mayor claridad.</p>"},{"location":"3.-Variables-en-C/#nombres-de-variables-identificadores","title":"Nombres de variables (identificadores)","text":"<p>Pueden contener:</p> <ul> <li>Letras (a-z, A-Z)</li> <li>D\u00edgitos (0-9)</li> <li>El car\u00e1cter <code>_</code></li> </ul> <p>Reglas importantes:</p> <ul> <li>No pueden comenzar con un d\u00edgito.</li> <li>Son sensibles a may\u00fasculas y min\u00fasculas.</li> <li>No pueden usar palabras reservadas del lenguaje.</li> </ul>"},{"location":"3.-Variables-en-C/#palabras-reservadas-en-c","title":"Palabras reservadas en C","text":"<p>Son t\u00e9rminos predefinidos que tienen un uso espec\u00edfico:</p> auto double int struct break else long switch case enum register typedef char extern return union const float short unsigned continue for signed void default goto sizeof volatile do if static while"},{"location":"3.-Variables-en-C/#constantes-de-variables","title":"Constantes de variables","text":""},{"location":"3.-Variables-en-C/#numericas-enteras","title":"Num\u00e9ricas enteras","text":"<ul> <li>Base 10: 1234</li> <li>Base 8: 01234 (prefijo 0)</li> <li>Base 16: 0xC o 0XC (prefijo 0x o 0X)</li> </ul> <p>Sufijos para indicar tipo:</p> <ul> <li><code>u</code> o <code>U</code>: unsigned</li> <li><code>l</code> o <code>L</code>: long</li> </ul> <p>Ejemplo: <code>1234ull</code></p>"},{"location":"3.-Variables-en-C/#constantes-caracter","title":"Constantes car\u00e1cter","text":"<p>Los <code>char</code> se basan en la tabla ASCII.</p> <p>Ejemplo: <code>'1'</code> no equivale a <code>1</code>.</p> <p>Secuencias de escape comunes:</p> Car\u00e1cter Valor ASCII Secuencia de escape Campana 7 <code>\\a</code> Retroceso 8 <code>\\b</code> Tabulador horizontal 9 <code>\\t</code> Nueva l\u00ednea 10 <code>\\n</code> Tabulador vertical 11 <code>\\v</code> Avance de hoja 12 <code>\\f</code> Retorno de carro 13 <code>\\r</code> Comillas dobles 34 <code>\"</code> Comillas simples 39 <code>'</code> Barra invertida 92 <code>\\</code>"},{"location":"3.-Variables-en-C/#constantes-reales","title":"Constantes reales","text":"<p>Ejemplo: <code>1234.56e-5</code></p> <ul> <li>Parte entera: <code>1234</code></li> <li>Punto decimal: <code>.</code></li> <li>Parte decimal: <code>56</code></li> <li><code>e-5</code>: multiplicar por 10 elevado a -5</li> </ul> <p>Sufijos para tipos:</p> <ul> <li><code>f</code> o <code>F</code> para <code>float</code></li> <li><code>l</code> o <code>L</code> para <code>long double</code></li> </ul> <p>Ejemplo: <code>0.1l</code>, <code>12.0f</code></p>"},{"location":"3.-Variables-en-C/#constantes-simbolicas","title":"Constantes simb\u00f3licas","text":"<p>Se usan para definir s\u00edmbolos que sustituyen valores, facilitando la legibilidad:</p> Ejemplo constante simb\u00f3lica<pre><code>#define PI 3.14\n</code></pre> <p>Tambi\u00e9n se puede usar para tipos:</p> <pre><code>#define ENTERO int;\n\nENTERO i;\n</code></pre> <p>Por convenci\u00f3n, se escriben en may\u00fasculas para distinguirlas.</p>"},{"location":"3.-Variables-en-C/#constantes-de-enumeracion","title":"Constantes de enumeraci\u00f3n","text":"<p>Alternativa a <code>#define</code> para enumerar valores enteros:</p> Ejemplo constante de enumeraci\u00f3n<pre><code>enum cierto {NO, SI};\n/* equivalente a */\n#define NO 0\n#define SI 1\n\nenum dias {LUNES, MARTES, MIERCOLES, JUEVES, VIERNES, SABADO, DOMINGO};\nenum dias d;\n</code></pre> <p>Se pueden asignar valores expl\u00edcitos con <code>=</code> dentro de la enumeraci\u00f3n.</p>"},{"location":"3.-Variables-en-C/#asignacion-lectura-y-escritura-de-variables","title":"Asignaci\u00f3n, lectura y escritura de variables","text":""},{"location":"3.-Variables-en-C/#asignacion","title":"Asignaci\u00f3n","text":"<p>Sintaxis:</p> <p><code>variable</code> <code>=</code> <code>valor</code> <code>;</code></p> <p>Ejemplos:</p> <pre><code>int i;\ni = 1;\nint n = 0;\nchar x = 'X';\n</code></pre>"},{"location":"3.-Variables-en-C/#lectura","title":"Lectura","text":"<p>Usando la biblioteca est\u00e1ndar <code>stdio.h</code>:</p> Lectura de variable<pre><code>#include &lt;stdio.h&gt;\n\nint main()\n{\n    scanf(\"formato\", &amp;variable);\n}\n</code></pre> <p>Formatos comunes:</p> <ul> <li><code>%c</code> para <code>char</code></li> <li><code>%d</code> para <code>int</code></li> <li><code>%f</code> para <code>float</code></li> </ul> <p>El operador <code>&amp;</code> indica la direcci\u00f3n de memoria.</p>"},{"location":"3.-Variables-en-C/#escritura","title":"Escritura","text":"<p>Sintaxis:</p> <pre><code>#include &lt;stdio.h&gt;\n\nint main()\n{\n    printf(\"formato\", argumentos);\n}\n</code></pre> <p>Operadores de formato:</p> <ul> <li><code>%c</code> para <code>char</code></li> <li><code>%d</code> para <code>int</code></li> <li><code>%f</code> para <code>float</code></li> </ul> <p>Los argumentos se listan en orden separados por comas.</p>"},{"location":"3.-Variables-en-C/#ejemplo-de-programa","title":"Ejemplo de programa","text":"Ejemplo 1<pre><code>#include &lt;stdio.h&gt;\n\n#define MAX 100\n\nenum dias {LUNES, MARTES, MIERCOLES, JUEVES, VIERNES, SABADO, DOMINGO};\n\nvoid main()\n{\n    int i = 10;\n    float f;\n\n    scanf(\"%f\", &amp;f);\n\n    printf(\"i = %d, f = %f\", i, f);\n}\n</code></pre>"},{"location":"4.-Asignaci%C3%B3n.-Operadores/","title":"4.- Asignaci\u00f3n y Operadores en C","text":"<p>Bienvenido a este cap\u00edtulo, donde aprender\u00e1s sobre asignaci\u00f3n y los operadores en C. Esta secci\u00f3n incluye ejemplos pr\u00e1cticos, advertencias importantes y tips \u00fatiles.</p>"},{"location":"4.-Asignaci%C3%B3n.-Operadores/#asignacion","title":"Asignaci\u00f3n","text":"<p>La sintaxis b\u00e1sica de una asignaci\u00f3n es:</p> <p><code>nombre de variable</code> <code>=</code> <code>expresi\u00f3n del mismo tipo</code></p> <p>Se pueden asignar los siguientes elementos despu\u00e9s del signo =:</p> <ul> <li>Una constante</li> <li>Una constante simb\u00f3lica</li> <li>Una constante de enumeraci\u00f3n</li> <li>El valor de otra variable</li> <li>Un c\u00e1lculo con operadores</li> <li>El resultado de una funci\u00f3n</li> </ul> <p>Tip</p> <p>Despu\u00e9s de declarar una variable, es recomendable inicializarla inmediatamente con un valor.</p> Ejemplo de asignaciones<pre><code>/* Ejemplos de asignaciones */\n\n#define MAX 38\n\nenum quiniela {UNO='1', EQUIS='X', DOS='2'};\n\nint i;\nint j;\nchar x;\n\n/* Constante */\ni = -123;\nx = 'L';\n\n/* Constantes simb\u00f3licas y de enumeraci\u00f3n */\ni = MAX;\nx = EQUIS;\n\n/* Otra variable */\nj = i; /* Ahora j vale 38 al igual que i */\n</code></pre>"},{"location":"4.-Asignaci%C3%B3n.-Operadores/#operadores-en-c","title":"Operadores en C","text":""},{"location":"4.-Asignaci%C3%B3n.-Operadores/#operadores-aritmeticos","title":"Operadores Aritm\u00e9ticos","text":"<p>Son los siguientes:</p> <ul> <li><code>+</code> (Suma)</li> <li><code>-</code> (Resta)</li> <li><code>*</code> (Producto)</li> <li><code>/</code> (Cociente)</li> <li><code>%</code> (M\u00f3dulo)</li> </ul> <p>Importante</p> <p>No mezcles tipos de variables (por ejemplo, <code>int</code> con <code>float</code>) para evitar errores. Si ocurre, el resultado ser\u00e1 promovido a <code>float</code>.</p>"},{"location":"4.-Asignaci%C3%B3n.-Operadores/#operadores-de-relacion-e-igualdad","title":"Operadores de Relaci\u00f3n e Igualdad","text":"<ul> <li><code>&lt;</code> (menor que)</li> <li><code>&gt;</code> (mayor que)</li> <li><code>&lt;=</code> (menor igual que)</li> <li><code>&gt;=</code> (mayor igual que)</li> <li><code>==</code> (igual que)</li> <li><code>!=</code> (distinto que)</li> </ul> <p>Note</p> <p>Para comparar caracteres, se usa su valor ASCII.</p>"},{"location":"4.-Asignaci%C3%B3n.-Operadores/#operadores-logicos","title":"Operadores L\u00f3gicos","text":"<ul> <li><code>!</code> (NOT)</li> <li><code>&amp;&amp;</code> (AND)</li> <li><code>||</code> (OR)</li> </ul> <p><code>!</code> es unario, mientras que <code>&amp;&amp;</code> y <code>||</code> son binarios.</p>"},{"location":"4.-Asignaci%C3%B3n.-Operadores/#tablas-de-resultados","title":"Tablas de resultados:","text":""},{"location":"4.-Asignaci%C3%B3n.-Operadores/#not","title":"NOT","text":"Expresi\u00f3n Resultado !1 0 !0 1"},{"location":"4.-Asignaci%C3%B3n.-Operadores/#and","title":"AND","text":"Expresi\u00f3n Resultado 1 &amp;&amp; 1 1 1 &amp;&amp; 0 0 0 &amp;&amp; 1 0 0 &amp;&amp; 0 0"},{"location":"4.-Asignaci%C3%B3n.-Operadores/#or","title":"OR","text":"Expresi\u00f3n Resultado 1 || 1 1 1 || 0 1 0 || 1 1 0 || 0 0"},{"location":"4.-Asignaci%C3%B3n.-Operadores/#operadores-de-incremento-y-decremento","title":"Operadores de Incremento y Decremento","text":"<ul> <li><code>++</code></li> <li><code>--</code></li> </ul> <p>Ejemplo:</p> <pre><code>int i = 0;\nint a;\nint b;\n\na = ++i; /* i y a valen 1 */\nb = i--; /* b vale 1 e i 0 */\n\n/* Forma abreviada */\ni++;\n/* Equivale a */\ni = i + 1;\n</code></pre>"},{"location":"4.-Asignaci%C3%B3n.-Operadores/#operadores-de-asignacion","title":"Operadores de Asignaci\u00f3n","text":"<p>Abreviaciones:</p> <pre><code>i = i + 7;\n/* Equivale a */\ni += 7;\n</code></pre> <p>Cuidado</p> <p><code>i *= j + 2;</code> Equivale a: <code>i = i * (j + 2);</code> No a: <code>i = (i * j) + 2;</code></p>"},{"location":"4.-Asignaci%C3%B3n.-Operadores/#operadores-de-manejo-de-bits","title":"Operadores de Manejo de Bits","text":"<ul> <li><code>&amp;</code> (AND)</li> <li><code>|</code> (OR)</li> <li><code>^</code> (XOR)</li> <li><code>&lt;&lt;</code> (Desplazamiento a la izquierda)</li> <li><code>&gt;&gt;</code> (Desplazamiento a la derecha)</li> <li><code>~</code> (Complemento a 1)</li> </ul> <p>Ejemplo:</p> <pre><code>char c = 0b10110011;\nc &amp; 07; /* Resultado binario: 00000011 */\n</code></pre> <p>Note</p> <p>Se recomienda usar variables unsigned para operaciones con bits.</p>"},{"location":"4.-Asignaci%C3%B3n.-Operadores/#operador-sizeof","title":"Operador <code>sizeof()</code>","text":"<p>Devuelve el tama\u00f1o en bytes del tipo o variable:</p> <pre><code>sizeof(char);\n</code></pre>"},{"location":"4.-Asignaci%C3%B3n.-Operadores/#expresion-condicional-operador-ternario","title":"Expresi\u00f3n Condicional (Operador ternario)","text":"<pre><code>c = (n % 2 == 0) ? 'Par' : 'Impar';\n</code></pre>"},{"location":"4.-Asignaci%C3%B3n.-Operadores/#precedencia-de-operadores","title":"Precedencia de Operadores","text":"Operadores (de mayor a menor) () [] -&gt; ! ~ ++ -- + - * &amp; sizeof * / % + - &lt;&lt; &gt;&gt; &lt; &lt;= &gt; &gt;= == != &amp; ^ | &amp;&amp; || ? : = += -= *= /= %= &amp;= ^= |= &lt;&lt;= &gt;&gt;= <p>Tip</p> <p>Usa par\u00e9ntesis para evitar ambig\u00fcedades y mejorar la legibilidad.</p>"},{"location":"4.-Asignaci%C3%B3n.-Operadores/#conversion-de-tipos-casting","title":"Conversi\u00f3n de Tipos (Casting)","text":"<p>Ejemplo:</p> <pre><code>char c;\nfloat x;\n\nc = (char)x;\n</code></pre> <p>Note</p> <p>El casting fuerza un tipo de dato para que coincida con otro y evitar errores de compilaci\u00f3n.</p>"},{"location":"5.-Estructuras-de-control-de-flujo/","title":"5.- Estructuras de Control de Flujo","text":"<p>Un programa se basa en un conjunto de sentencias o instrucciones. Estas pueden contener un tipo especial de sentencias que dan control sobre objetos o datos del programa.</p> <p>En C, las sentencias terminan con <code>;</code> (punto y coma). Estas se agrupan en bloques encerrados entre llaves <code>{ }</code>.</p> <p>Agrupaci\u00f3n de sentencias</p> <p>Las sentencias que controlan el flujo pueden contener otras sentencias dentro de ellas. Esto se llama anidaci\u00f3n.</p>"},{"location":"5.-Estructuras-de-control-de-flujo/#if-else","title":"if else","text":"<p><code>if</code> se utiliza para ejecutar una sentencia (o grupo de ellas) dependiendo del valor de una condici\u00f3n.  </p> <p>Sintaxis:</p> <pre><code>if (condicion)\n{\n    sentencias 1;\n}\nelse\n{\n    sentencias 2;\n}\n</code></pre> <p>Tip</p> <p>El bloque <code>else</code> es opcional, pero se recomienda utilizar llaves <code>{}</code> incluso en sentencias simples para mejorar la legibilidad.</p> <p>Ejemplos:</p> <pre><code>if (1)\n{\n    printf(\"Hola\");\n}\nelse \n{\n    printf(\"Adios\");\n}\n\n/* Par o Impar */\nif (n % 2 == 0)\n{\n    printf(\"Par\");\n}\nelse\n{\n    printf(\"Impar\");\n}\n</code></pre>"},{"location":"5.-Estructuras-de-control-de-flujo/#switch","title":"switch","text":"<p>La estructura <code>switch</code> permite ejecutar distintas ramas en funci\u00f3n de un valor entero.  </p> <p>Sintaxis:</p> <pre><code>switch (expresion_entera)\n{\n    case const1:\n        sentencias1;\n        break;\n    case const2:\n        sentencias2;\n        break;\n    ...\n    default:\n        sentencias_por_defecto;\n        break;\n}\n</code></pre> <p>Warning</p> <p>La expresi\u00f3n del <code>switch</code> nunca debe ser <code>float</code>. Solo se permite <code>int</code> o <code>char</code>. Adem\u00e1s, siempre incluye <code>break</code> para evitar ejecuci\u00f3n no deseada de otros casos.</p> <p>Ejemplo 1:</p> <pre><code>switch (nota)\n{\n    case 'A':\n        printf(\"Sobresaliente\");\n        break;\n    case 'B':\n        printf(\"Notable\");\n        break;\n    case 'C':\n        printf(\"Aprobado\");\n        break;\n    case 'D':\n        printf(\"Suspendido\");\n        break;\n    default:\n        printf(\"Nota no valida\");\n        break;\n}\n</code></pre> <p>Ejemplo 2:</p> <pre><code>switch (nota)\n{\n    case 10:\n    case 9:\n        printf(\"Sobresaliente\");\n        break;\n    case 8:\n    case 7:\n        printf(\"Notable\");\n        break;\n    case 6:\n    case 5:\n        printf(\"Aprobado\");\n        break;\n    case 4:\n    case 3:\n        printf(\"Suspendido\");\n        break;\n    case 2:\n    case 1:\n    case 0:\n        printf(\"Muy deficiente\");\n        break;\n    default:\n        printf(\"Nota no valida\");\n        break;\n}\n</code></pre>"},{"location":"5.-Estructuras-de-control-de-flujo/#else-if","title":"else if","text":"<p>Se usa cuando se requiere evaluar m\u00faltiples condiciones en orden.  </p> <p>Sintaxis:</p> <pre><code>if (condicion_1)\n{\n    sentencias1;\n}\nelse if (condicion_2)\n{\n    sentencias2;\n}\nelse\n{\n    sentencias_default;\n}\n</code></pre> <p>Ejemplo:</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main(void)\n{\n    float nota;\n    printf(\"Inserte la nota:\\n\");\n    scanf(\"%f\", &amp;nota);\n\n    if (9 &lt;= nota &amp;&amp; nota &lt;= 10)\n        printf(\"Sobresaliente\\n\");\n    else if (7 &lt;= nota &amp;&amp; nota &lt; 9)\n        printf(\"Notable\\n\");\n    else if (5 &lt;= nota &amp;&amp; nota &lt; 7)\n        printf(\"Aprobado\\n\");\n    else if (0 &lt;= nota &amp;&amp; nota &lt; 5)\n        printf(\"Suspendido\\n\");\n    else\n        printf(\"Nota no valida\\n\");\n}\n</code></pre>"},{"location":"5.-Estructuras-de-control-de-flujo/#while-y-do-while","title":"while y do while","text":"<p>Se utilizan para repetir instrucciones mientras se cumpla una condici\u00f3n (bucles).</p> <p>while:</p> <pre><code>while (condicion)\n{\n    sentencias;\n}\n</code></pre> <p>do while:</p> <pre><code>do\n{\n    sentencias;\n}\nwhile (condicion);\n</code></pre> <p>Note</p> <p>En <code>do while</code> el bloque se ejecuta al menos una vez, incluso si la condici\u00f3n es falsa al inicio.</p> <p>Ejemplo:</p> <pre><code>#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    int i = 1;\n\n    while (i &lt; 10)\n    {\n        printf(\"Hola %d\\n\", i);\n        i++;\n    }\n\n    do\n    {\n        printf(\"Hola %d\\n\", i);\n        i--;\n    }\n    while (i &gt;= 1);\n}\n</code></pre>"},{"location":"5.-Estructuras-de-control-de-flujo/#for","title":"for","text":"<p>Estructura com\u00fan para bucles con contador.</p> <p>Sintaxis:</p> <pre><code>for (inicializacion; condicion; variacion)\n{\n    sentencias;\n}\n</code></pre> <p>Ejemplo:</p> <pre><code>for (int i = 0; i &lt; 10; i++)\n{\n    printf(\"Hola %d\\n\", i);\n}\n</code></pre> <p>Warning</p> <p>Si omites las tres expresiones en el <code>for</code>, se genera un bucle infinito.</p>"},{"location":"5.-Estructuras-de-control-de-flujo/#break-y-continue","title":"break y continue","text":"<ul> <li><code>break</code>: Sale del bucle actual o de un <code>switch</code>.</li> <li><code>continue</code>: Salta a la siguiente iteraci\u00f3n del bucle.</li> </ul> <p>Ejemplo de <code>break</code>:</p> <pre><code>for (...)\n{\n    if (...)\n    {\n        break;\n    }\n}\n</code></pre> <p>Ejemplo de <code>continue</code>:</p> <pre><code>for (int i = 0; i &lt;= 100; i++)\n{\n    if (i % 2 == 0)\n        continue; // Salta pares\n    printf(\"%d\\n\", i);\n}\n</code></pre>"},{"location":"5.-Estructuras-de-control-de-flujo/#goto","title":"goto","text":"<p>Permite saltar a una etiqueta en el c\u00f3digo.</p> <p>Sintaxis:</p> <pre><code>goto etiqueta;\n/* ... */\netiqueta:\n    sentencias;\n</code></pre> <p>Advertencia sobre goto</p> <p>No se recomienda usar <code>goto</code>, ya que hace el c\u00f3digo dif\u00edcil de leer y mantener. Su uso debe ser excepcional.</p>"}]}